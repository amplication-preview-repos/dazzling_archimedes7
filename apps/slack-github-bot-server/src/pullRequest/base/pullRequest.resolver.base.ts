/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { PullRequest } from "./PullRequest";
import { PullRequestCountArgs } from "./PullRequestCountArgs";
import { PullRequestFindManyArgs } from "./PullRequestFindManyArgs";
import { PullRequestFindUniqueArgs } from "./PullRequestFindUniqueArgs";
import { CreatePullRequestArgs } from "./CreatePullRequestArgs";
import { UpdatePullRequestArgs } from "./UpdatePullRequestArgs";
import { DeletePullRequestArgs } from "./DeletePullRequestArgs";
import { CommentFindManyArgs } from "../../comment/base/CommentFindManyArgs";
import { Comment } from "../../comment/base/Comment";
import { Repository } from "../../repository/base/Repository";
import { PullRequestService } from "../pullRequest.service";
@graphql.Resolver(() => PullRequest)
export class PullRequestResolverBase {
  constructor(protected readonly service: PullRequestService) {}

  async _pullRequestsMeta(
    @graphql.Args() args: PullRequestCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [PullRequest])
  async pullRequests(
    @graphql.Args() args: PullRequestFindManyArgs
  ): Promise<PullRequest[]> {
    return this.service.pullRequests(args);
  }

  @graphql.Query(() => PullRequest, { nullable: true })
  async pullRequest(
    @graphql.Args() args: PullRequestFindUniqueArgs
  ): Promise<PullRequest | null> {
    const result = await this.service.pullRequest(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => PullRequest)
  async createPullRequest(
    @graphql.Args() args: CreatePullRequestArgs
  ): Promise<PullRequest> {
    return await this.service.createPullRequest({
      ...args,
      data: {
        ...args.data,

        repository: args.data.repository
          ? {
              connect: args.data.repository,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => PullRequest)
  async updatePullRequest(
    @graphql.Args() args: UpdatePullRequestArgs
  ): Promise<PullRequest | null> {
    try {
      return await this.service.updatePullRequest({
        ...args,
        data: {
          ...args.data,

          repository: args.data.repository
            ? {
                connect: args.data.repository,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PullRequest)
  async deletePullRequest(
    @graphql.Args() args: DeletePullRequestArgs
  ): Promise<PullRequest | null> {
    try {
      return await this.service.deletePullRequest(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Comment], { name: "comments" })
  async findComments(
    @graphql.Parent() parent: PullRequest,
    @graphql.Args() args: CommentFindManyArgs
  ): Promise<Comment[]> {
    const results = await this.service.findComments(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => Repository, {
    nullable: true,
    name: "repository",
  })
  async getRepository(
    @graphql.Parent() parent: PullRequest
  ): Promise<Repository | null> {
    const result = await this.service.getRepository(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
