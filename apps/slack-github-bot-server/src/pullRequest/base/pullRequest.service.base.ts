/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  PullRequest as PrismaPullRequest,
  Comment as PrismaComment,
  Repository as PrismaRepository,
} from "@prisma/client";

export class PullRequestServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.PullRequestCountArgs, "select">
  ): Promise<number> {
    return this.prisma.pullRequest.count(args);
  }

  async pullRequests<T extends Prisma.PullRequestFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.PullRequestFindManyArgs>
  ): Promise<PrismaPullRequest[]> {
    return this.prisma.pullRequest.findMany<Prisma.PullRequestFindManyArgs>(
      args
    );
  }
  async pullRequest<T extends Prisma.PullRequestFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.PullRequestFindUniqueArgs>
  ): Promise<PrismaPullRequest | null> {
    return this.prisma.pullRequest.findUnique(args);
  }
  async createPullRequest<T extends Prisma.PullRequestCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.PullRequestCreateArgs>
  ): Promise<PrismaPullRequest> {
    return this.prisma.pullRequest.create<T>(args);
  }
  async updatePullRequest<T extends Prisma.PullRequestUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.PullRequestUpdateArgs>
  ): Promise<PrismaPullRequest> {
    return this.prisma.pullRequest.update<T>(args);
  }
  async deletePullRequest<T extends Prisma.PullRequestDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.PullRequestDeleteArgs>
  ): Promise<PrismaPullRequest> {
    return this.prisma.pullRequest.delete(args);
  }

  async findComments(
    parentId: string,
    args: Prisma.CommentFindManyArgs
  ): Promise<PrismaComment[]> {
    return this.prisma.pullRequest
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .comments(args);
  }

  async getRepository(parentId: string): Promise<PrismaRepository | null> {
    return this.prisma.pullRequest
      .findUnique({
        where: { id: parentId },
      })
      .repository();
  }
}
