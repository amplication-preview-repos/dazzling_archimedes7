/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Repository as PrismaRepository,
  PullRequest as PrismaPullRequest,
} from "@prisma/client";

export class RepositoryServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.RepositoryCountArgs, "select">
  ): Promise<number> {
    return this.prisma.repository.count(args);
  }

  async repositories<T extends Prisma.RepositoryFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.RepositoryFindManyArgs>
  ): Promise<PrismaRepository[]> {
    return this.prisma.repository.findMany<Prisma.RepositoryFindManyArgs>(args);
  }
  async repository<T extends Prisma.RepositoryFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.RepositoryFindUniqueArgs>
  ): Promise<PrismaRepository | null> {
    return this.prisma.repository.findUnique(args);
  }
  async createRepository<T extends Prisma.RepositoryCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.RepositoryCreateArgs>
  ): Promise<PrismaRepository> {
    return this.prisma.repository.create<T>(args);
  }
  async updateRepository<T extends Prisma.RepositoryUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.RepositoryUpdateArgs>
  ): Promise<PrismaRepository> {
    return this.prisma.repository.update<T>(args);
  }
  async deleteRepository<T extends Prisma.RepositoryDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.RepositoryDeleteArgs>
  ): Promise<PrismaRepository> {
    return this.prisma.repository.delete(args);
  }

  async findPullRequests(
    parentId: string,
    args: Prisma.PullRequestFindManyArgs
  ): Promise<PrismaPullRequest[]> {
    return this.prisma.repository
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .pullRequests(args);
  }
}
